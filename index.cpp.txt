#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_EMPLOYEES 100
#define MAX_NAME_LEN 50

typedef struct {
    int id;
    char name[MAX_NAME_LEN];
    char address[MAX_NAME_LEN];
    char email[MAX_NAME_LEN];
    char contact[MAX_NAME_LEN];
    char account_number[MAX_NAME_LEN];
    char cnic[MAX_NAME_LEN];
    char doj[MAX_NAME_LEN];
    char designation[MAX_NAME_LEN];
    double salary;
    double work_hours;
    double overtime_hours;
    int unpaid_leaves;
} Employee;

Employee employees[MAX_EMPLOYEES];
int employee_count = 0;

char company_name[MAX_NAME_LEN] = "Default Company Name";

void print_line() {
    printf("========================================================\n");
}

void set_company_name() {
    print_line();
    printf("                  Set Company Name                     \n");
    print_line();
    printf("Enter company name: ");
    scanf(" %[^\n]", company_name);
    printf("Company name updated to: %s\n", company_name);
    print_line();
}

void edit_company_name() {
    print_line();
    printf("                  Edit Company Name                    \n");
    print_line();
    printf("Current company name: %s\n", company_name);
    printf("Enter new company name: ");
    scanf(" %[^\n]", company_name);
    printf("Company name updated to: %s\n", company_name);
    print_line();
}

int is_valid_name(const char *name) {
    int i;
    for (i = 0; i < strlen(name); i++) {
        if (!isalpha(name[i]) && name[i] != ' ') {
            return 0;
        }
    }
    return 1;
}

int is_valid_email(const char *email) {
    const char *at = strchr(email, '@');
    if (at && strchr(at, '.')) {
        return 1;
    }
    return 0;
}

int is_valid_contact(const char *contact) {
    int i;
    for (i = 0; i < strlen(contact); i++) {
        if (!isdigit(contact[i])) {
            return 0;
        }
    }
    return 1;
}

int is_valid_cnic(const char *cnic) {
    int len = strlen(cnic);
    if (len == 13 || (len == 15 && cnic[5] == '-' && cnic[13] == '-')) {
        return 1;
    }
    return 0;
}

void input_name(char *name) {
    while (1) {
        printf("Enter name: ");
        scanf(" %[^\n]%*c", name);
        if (is_valid_name(name)) {
            break;
        } else {
            printf("Invalid name. Only alphabetic characters and spaces are allowed. Please try again.\n");
        }
    }
}

void input_email(char *email) {
    while (1) {
        printf("Enter email: ");
        scanf(" %[^\n]%*c", email);
        if (is_valid_email(email)) {
            break;
        } else {
            printf("Invalid email format. Please try again.\n");
        }
    }
}

void input_contact(char *contact) {
    while (1) {
        printf("Enter contact: ");
        scanf(" %[^\n]%*c", contact);
        if (is_valid_contact(contact)) {
            break;
        } else {
            printf("Invalid contact. Only numeric characters are allowed. Please try again.\n");
        }
    }
}

void input_cnic(char *cnic) {
    while (1) {
        printf("Enter CNIC: ");
        scanf(" %[^\n]%*c", cnic);
        if (is_valid_cnic(cnic)) {
            break;
        } else {
            printf("Invalid CNIC format. Please enter 13 digits or in the format XXXXX-XXXXXXX-X. Please try again.\n");
        }
    }
}

void add_employee() {
    if (employee_count >= MAX_EMPLOYEES) {
        print_line();
        printf("                  Add Employee                         \n");
        print_line();
        printf("Employee limit reached.\n");
        return;
    }

    Employee *e = &employees[employee_count];
    e->id = employee_count + 1;

    print_line();
    printf("                  Add Employee                         \n");
    print_line();

    input_name(e->name);

    printf("Enter address: ");
    scanf(" %[^\n]%*c", e->address);

    input_email(e->email);

    input_contact(e->contact);

    printf("Enter account number: ");
    scanf(" %[^\n]%*c", e->account_number);

    input_cnic(e->cnic);

    printf("Enter DOJ: ");
    scanf(" %[^\n]%*c", e->doj);

    printf("Enter designation: ");
    scanf(" %[^\n]%*c", e->designation);

    printf("Enter salary: ");
    scanf("%lf", &e->salary);

    e->work_hours = 0;
    e->overtime_hours = 0;
    e->unpaid_leaves = 0;
    employee_count++;

    printf("Employee added successfully.\n");
    print_line();
}

void edit_employee() {
    int id;
    print_line();
    printf("                  Edit Employee                        \n");
    print_line();
    printf("Enter employee ID to edit: ");
    scanf("%d", &id);
    if (id <= 0 || id > employee_count) {
        printf("Invalid employee ID.\n");
        return;
    }

    Employee *e = &employees[id - 1];
    char input[MAX_NAME_LEN];

    printf("Edit name (current: %s): ", e->name);
    input_name(input);
    if (strlen(input) > 1) {
        strcpy(e->name, input);
    }

    printf("Edit address (current: %s): ", e->address);
    getchar();  // to consume the newline character left by previous scanf
    fgets(input, sizeof(input), stdin);
    if (strlen(input) > 1) {
        input[strcspn(input, "\n")] = '\0';
        strcpy(e->address, input);
    }

    printf("Edit email (current: %s): ", e->email);
    input_email(input);
    if (strlen(input) > 1) {
        strcpy(e->email, input);
    }

    printf("Edit contact (current: %s): ", e->contact);
    input_contact(input);
    if (strlen(input) > 1) {
        strcpy(e->contact, input);
    }

    printf("Edit account number (current: %s): ", e->account_number);
    fgets(input, sizeof(input), stdin);
    if (strlen(input) > 1) {
        input[strcspn(input, "\n")] = '\0';
        strcpy(e->account_number, input);
    }

    printf("Edit CNIC (current: %s): ", e->cnic);
    input_cnic(input);
    if (strlen(input) > 1) {
        strcpy(e->cnic, input);
    }

    printf("Edit DOJ (current: %s): ", e->doj);
    fgets(input, sizeof(input), stdin);
    if (strlen(input) > 1) {
        input[strcspn(input, "\n")] = '\0';
        strcpy(e->doj, input);
    }

    printf("Edit designation (current: %s): ", e->designation);
    fgets(input, sizeof(input), stdin);
    if (strlen(input) > 1) {
        input[strcspn(input, "\n")] = '\0';
        strcpy(e->designation, input);
    }

    printf("Edit salary (current: %.2lf): ", e->salary);
    scanf("%lf", &e->salary);

    printf("Employee edited successfully.\n");
    print_line();
}

void record_work_hours() {
    int id;
    double hours, overtime;
    print_line();
    printf("                  Record Work Hours                    \n");
    print_line();
    printf("Enter employee ID: ");
    scanf("%d", &id);
    if (id <= 0 || id > employee_count) {
        printf("Invalid employee ID.\n");
        return;
    }

    printf("Enter regular work hours: ");
    scanf("%lf", &hours);
    printf("Enter overtime hours: ");
    scanf("%lf", &overtime);

    Employee *e = &employees[id - 1];
    e->work_hours += hours;
    e->overtime_hours += overtime;

    printf("Work hours recorded successfully.\n");
    print_line();
}

void record_leave() {
    int id, unpaid_leaves;
    print_line();
    printf("                  Record Leave                         \n");
    print_line();
    printf("Enter employee ID: ");
    scanf("%d", &id);
    if (id <= 0 || id > employee_count) {
        printf("Invalid employee ID.\n");
        return;
    }

    printf("Enter number of unpaid leave days: ");
    scanf("%d", &unpaid_leaves);

    Employee *e = &employees[id - 1];
    e->unpaid_leaves += unpaid_leaves;

    printf("Leave recorded successfully.\n");
    print_line();
}

void calculate_pay() {
    int i;
    print_line();
    printf("                  Calculate Pay                        \n");
    print_line();
    for (i = 0; i < employee_count; i++) {
        Employee *e = &employees[i];
        double gross_pay = e->salary + (e->overtime_hours * e->salary / 160);
        double deductions = (e->unpaid_leaves * e->salary / 30);
        double net_pay = gross_pay - deductions;
        printf("Employee ID: %d, Net Pay: %.2lf\n", e->id, net_pay);
    }
    print_line();
}

void transfer_pay() {
    int i;
    print_line();
    printf("                  Transfer Pay                         \n");
    print_line();
    for (i = 0; i < employee_count; i++) {
        Employee *e = &employees[i];
        double gross_pay = e->salary + (e->overtime_hours * e->salary / 160);
        double deductions = (e->unpaid_leaves * e->salary / 30);
        double net_pay = gross_pay - deductions;
        printf("Transferring %.2lf to account %s for employee %d\n", net_pay, e->account_number, e->id);
    }
    printf("Pay transfer completed.\n");
    print_line();
}

void salary_slip() {
    int i;
    print_line();
    printf("                  Generate Salary Slips                \n");
    print_line();
    for (i = 0; i < employee_count; i++) {
        Employee *e = &employees[i];
        double gross_pay = e->salary + (e->overtime_hours * e->salary / 160);
        double deductions = (e->unpaid_leaves * e->salary / 30);
        double net_pay = gross_pay - deductions;

        printf("\n================================\n");
        printf("Salary Slip for Employee ID: %d\n", e->id);
        printf("================================\n");
        printf("Name: %s\n", e->name);
        printf("Designation: %s\n", e->designation);
        printf("Basic Salary: %.2lf\n", e->salary);
        printf("Overtime Hours: %.2lf\n", e->overtime_hours);
        printf("Gross Pay: %.2lf\n", gross_pay);
        printf("Deductions: %.2lf\n", deductions);
        printf("Net Pay: %.2lf\n", net_pay);
        printf("================================\n");
    }
    print_line();
}

void display_employee_list() {
    int i;
    print_line();
    printf("                  Display Employee List                \n");
    print_line();
    printf("Company: %s\n", company_name);
    printf("Employee List:\n");
    printf("%-5s %-15s %-20s %-20s %-15s %-15s %-15s %-15s %-15s %-10s\n", 
           "ID", "Name", "Address", "Email", "Contact", "Account", "CNIC", "DOJ", "Designation", "Salary");
    for (i = 0; i < employee_count; i++) {
        Employee *e = &employees[i];
        printf("%-5d %-15s %-20s %-20s %-15s %-15s %-15s %-15s %-15s %-10.2lf\n",
               e->id, e->name, e->address, e->email, e->contact, e->account_number, e->cnic, e->doj, e->designation, e->salary);
    }
    print_line();
}

int main() {
    int choice;

    set_company_name();

    while (1) {
        printf("\nCompany: %s\n", company_name);
        printf("1. Add Employee\n");
        printf("2. Edit Employee\n");
        printf("3. Edit Company Name\n");
        printf("4. Record Work Hours\n");
        printf("5. Record Leave\n");
        printf("6. Calculate Pay\n");
        printf("7. Transfer Pay\n");
        printf("8. Generate Salary Slips\n");
        printf("9. Display Employee List\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                add_employee();
                break;
            case 2:
                edit_employee();
                break;
            case 3:
                edit_company_name();
                break;
            case 4:
                record_work_hours();
                break;
            case 5:
                record_leave();
                break;
            case 6:
                calculate_pay();
                break;
            case 7:
                transfer_pay();
                break;
                
            case 8:
                salary_slip();
                break;
            case 9:
                display_employee_list();
                break;
            case 10:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}